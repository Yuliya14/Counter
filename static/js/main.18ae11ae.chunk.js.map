{"version":3,"sources":["Button.tsx","InputValue.tsx","CounterValue.tsx","SetValueWindow.tsx","ResultWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","isDis","onClick","callbackFN","name","InputValue","type","placeholder","title","value","onChange","CounterValue","SetValueWindow","useEffect","currentMinValue","localStorage","getItem","setMinValue","JSON","parse","currentMaxValue","setMaxValue","setValue","minValue","min","setError","currentTarget","maxValue","max","setItem","stringify","ResultWindow","error","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18ae11ae.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    name: string\r\n    isDis?: boolean\r\n    callbackFN: () => void\r\n    error?: boolean\r\n}\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return <div>\r\n        <button className={props.isDis ? \"button-disabled\" : \"double-border-button\"}\r\n                onClick={props.callbackFN}>{props.name}</button>\r\n    </div>\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\nexport type InputValuePropsType = {\r\n    title: string\r\n    value: number\r\n    callbackFN: (num: ChangeEvent<HTMLInputElement>) => void\r\n}\r\nexport const InputValue = (props: InputValuePropsType) => {\r\n    return <div>\r\n        <input type = {\"number\"} placeholder={props.title} value={props.value} onChange={props.callbackFN}/>\r\n    </div>\r\n}","import {InputValue} from \"./InputValue\";\r\nimport React, {ChangeEvent} from \"react\";\r\n\r\ntype CounterValuePropsType = {\r\n    title: string\r\n    value: number\r\n    callbackFN: (value: ChangeEvent<HTMLInputElement>) => void\r\n}\r\nexport const CounterValue = (props: CounterValuePropsType) => {\r\n    return <div className={\"containerSetBlock\"}>{props.title}\r\n        <InputValue title={props.title} value={props.value} callbackFN={props.callbackFN}/>\r\n    </div>\r\n}","import React, {ChangeEvent, useEffect} from \"react\";\r\nimport {InputValue} from \"./InputValue\";\r\nimport {Button} from \"./Button\";\r\nimport {CounterValue} from \"./CounterValue\";\r\n\r\nexport type SetValueWindowPropsType = {\r\n    error: string\r\n    value: number\r\n    minValue: number\r\n    maxValue: number\r\n    setError: (someError: string) => void\r\n    setMinValue: (minValue: number) => void\r\n    setMaxValue: (maxValue: number) => void\r\n    setValue: (minValue: number) => void\r\n}\r\n\r\nexport const SetValueWindow = (props: SetValueWindowPropsType) => {\r\n\r\n    const setMinValueHandler = (min: ChangeEvent<HTMLInputElement>) => {\r\n        props.setError(\"Please, click button 'set'\")\r\n        props.setMinValue(+min.currentTarget.value)\r\n    }\r\n    const setMaxValueHandler = (max: ChangeEvent<HTMLInputElement>) => {\r\n        props.setError(\"Please, click button 'set'\")\r\n        props.setMaxValue(+max.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let currentMinValue = localStorage.getItem(\"minCurrentValue\")\r\n        if (currentMinValue) {\r\n            props.setMinValue(JSON.parse(currentMinValue))\r\n        }\r\n        let currentMaxValue = localStorage.getItem(\"maxCurrentValue\")\r\n        if (currentMaxValue) {\r\n            props.setMaxValue(JSON.parse(currentMaxValue))\r\n        }\r\n        let currentValue = localStorage.getItem(\"currentValue\")\r\n        if (currentValue) {\r\n            if (currentMinValue != null) {\r\n                props.setValue(JSON.parse(currentMinValue))\r\n            }\r\n        }\r\n    }, [])\r\n    const setCurrentValue = () => {\r\n        props.setError('')\r\n        if (props.minValue === props.maxValue) {\r\n            props.setError(\"The MIN and MAX values must not be equal!\")\r\n        } else if (props.minValue > props.maxValue) {\r\n            props.setError(\"The min value can't be greater than the max!\")\r\n        }\r\n        props.setValue(props.minValue)\r\n        localStorage.setItem(\"minCurrentValue\", JSON.stringify(props.minValue))\r\n        localStorage.setItem(\"maxCurrentValue\", JSON.stringify(props.maxValue))\r\n        localStorage.setItem(\"currentValue\", JSON.stringify(props.minValue))\r\n    }\r\n\r\n    return <div className={\"containerSetValueBlock\"}>\r\n        <CounterValue title={\"Enter MIN value:\"} value={props.minValue} callbackFN={setMinValueHandler}/>\r\n        <CounterValue title={\"Enter MAX value:\"} value={props.maxValue} callbackFN={setMaxValueHandler} />\r\n        <Button name={\"set\"} callbackFN={setCurrentValue}/>\r\n    </div>\r\n}\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\nexport type ResultWindowPropsType = {\r\n    error: string\r\n    value: number\r\n    minValue: number\r\n    maxValue: number\r\n    setError: (someError: string) => void\r\n    setValue: (minValue: number) => void\r\n}\r\nexport const ResultWindow = (props: ResultWindowPropsType) => {\r\n\r\n    const increaseValue = () => {\r\n        if (props.minValue === props.maxValue) {\r\n            props.setError(\"The MIN and MAX values must not be equal!\")\r\n        } else if (props.minValue > props.maxValue) {\r\n            props.setError(\"The min value can't be greater than the max!\")\r\n        }\r\n        if(props.minValue >= props.maxValue) return\r\n        else if (props.value < props.maxValue) { props.setValue(props.value + 1)}\r\n       }\r\n    const resetValue = () => props.setValue(props.minValue)\r\n\r\n    return <div className={\"containerResultBlock\"}>\r\n        {props.error ? <h3>{props.error}</h3> : <h3 className = {props.value === props.maxValue ? \"value\" : \"\"}>{props.value}</h3>}\r\n        <div className={\"containerResultButtonBlock\"}>\r\n            <Button name=\"inc\" isDis = {props.value === props.maxValue} callbackFN={increaseValue}/>\r\n            <Button name=\"res\" isDis = {props.value === props.minValue} callbackFN={resetValue}/>\r\n        </div>\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {SetValueWindow} from \"./SetValueWindow\";\nimport {ResultWindow} from \"./ResultWindow\";\n\nfunction App() {\n\n    let [minValue, setMinValue] = useState<number>(0)\n    let [maxValue, setMaxValue] = useState<number>(0)\n    const [value, setValue] = useState(minValue)\n    const [error, setError] = useState<string>(\"\")\n\n    return (\n        <div className=\"App\">\n            <SetValueWindow\n                value = {value}\n                minValue = {minValue}\n                maxValue = {maxValue}\n                setMinValue = {setMinValue}\n                setMaxValue = {setMaxValue}\n                setValue = {setValue}\n                error = {error}\n                setError = {setError}\n            />\n            <ResultWindow value = {value}\n                          minValue = {minValue}\n                          maxValue = {maxValue}\n                          setValue = {setValue}\n                          error = {error}\n                          setError = {setError}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}